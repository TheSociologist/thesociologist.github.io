---
layout: post
title:  "Best of Both Worlds: Combining SSR and CSR"
date:   2021-12-10 12:04:25 -0500
categories: article
---
First some background into rendering techniques. 

# Client Side Rendering
CSR involves all routing and rendering taking place on the client side. Its generally used in Single Page Applications (SPA). This results in a slower first page load but far quicker subsequent page load times. From a serving perspective, the server simply delivers a bundle of JS and CSS to the client (potentially in chunks of code-splitting is enabled). The client is then in charge of executing JS to change pages. The drawback is noticeably worse SEO performance. Google crawlers have started executing JS to crawl SPAs but there are still issues with using SPAs for anything other than dashboard-like applications. 

# Server Side Rendering (SSR)
SSR involves rendering pages on the server before sending them to the user. Every single page navigation makes a request to the server. The server itself is in charge of making requests to the backend if needed to fetch content. This can be quick if the backend and the frontend server are colocated. Generally speaking, SSR occupies a middle ground between Static Site Generation (SSG) and CSR. Although far better for SEO, SSR can have slower page loading times after the initial load as every navigation action must make a network request. Other advantages include better web previews on other platforms that support it. For example, Discord and Facebook display previews of links on messages and posts respectively. CSR would only display the default page while SSR would be able to dynamically add meta tags and generate a dynamic preview for the page. 

# Using Both
Let's use React as an example. The baseline Create-React-App (CRA) framework bootstraps a simple SPA which of course utilizes CSR. Frameworks like Next have made hybrid approaches far easier as pages that don't require initial page loads can be statically generated using SSG and sent to the user far quicker. On the client side, the browser makes the request the backend for the required content. Pages that do need to be optimized for SEO and have dynamic (potentially user generated) content can be served using SSR. 

However, rendering requirements may change depending on the type of user viewing the website. For example, signed in users have already been converted and are likely to prefer a seamless SPA interface with which to navigate. However, web crawlers obviously prefer the SSR route. I'll spend the rest of this article discussing a potential middleground. 

The Next router must use SSG or SSR to accomplish page changes. However, React Router which can be used with CRA applications can be used to add CSR to a Next page. Any page on Next could have an embedded React Router which would allow for CSR-style navigation within a traditionally SSR application. This is a good first step if you have complex navigation patterns but need SEO.

Another key feature of Next are rewrites. These can be used for a variety of purposes including incremental migration. Simply point certian links to an existing web app and Next can maintain routing while still rendering the other application in the browser. This presents a unique opportunity. If we deploy a SPA at a separate URL (likely a different subdomain e.g. app.site.com) then use rewrites we can decide when to use the SSR version of a page or the CSR version of a page. For example, if a user is signed in, we'd likely want to make the interface appear as a web application. If a web crawler or non-authenticated user attempts to reach the website we'd want to make sure that initial page load is nearly instantaneous. Next allow us to check certain fields before deciding to rewrite including headers, cookies, and queries. If you're using JWTs for authentication, you can simply check the header to see if a user is signed in or not. Alternatively, cookies are also available. Depending on this information, we can decide to either default to the Next version of a page or to the SPA version of the same page. If a client remains within the Next page, all subsequent navigation while not signed in will use SSR. If a user navigates to the CSR version of a page, all buttons and links will utilize the React router, ensuring that all subsequent navigation will not make server requests. 

This allows us to create a SPA-like experience for signed in users and still allow our website to be SEO-friendly. I envision this to be particularly useful for social media applications. You're dealing with a massive amount of user-generated content so SSG is out of the question. SSR for signed in users would be a considerably worse experience than what Reddit, Twitter, and Facebook are offering. But you'd likely want to your pages to show up at the top of the search results so CSR on its own wouldn't be optimal. This would provide a great middle ground between both systems. 